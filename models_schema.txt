# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Admitted(models.Model):
    id = models.IntegerField(primary_key=True)
    starttime = models.DateTimeField()
    endtime = models.DateTimeField()
    patientid = models.ForeignKey('Patient', models.DO_NOTHING)
    physicianid = models.ForeignKey('Physician', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'admitted'


class AppTreatments(models.Model):
    treatment_id = models.IntegerField(primary_key=True)
    patient_id = models.IntegerField()
    patient_name = models.CharField(max_length=100)
    symptoms = models.TextField(blank=True, null=True)
    treatments = models.TextField(blank=True, null=True)
    test_results = models.TextField(blank=True, null=True)
    image = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'app_treatments'


class Appointment(models.Model):
    id = models.IntegerField(primary_key=True)
    starttime = models.DateTimeField()
    endtime = models.DateTimeField()
    patientid = models.ForeignKey('Patient', models.DO_NOTHING)
    physicianid = models.ForeignKey('Physician', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'appointment'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Completed(models.Model):
    id = models.IntegerField(primary_key=True)
    starttime = models.DateTimeField()
    endtime = models.DateTimeField()
    patientid = models.ForeignKey('Patient', models.DO_NOTHING)
    physicianid = models.ForeignKey('Physician', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'completed'


class Count(models.Model):
    id = models.IntegerField(primary_key=True)
    countu = models.IntegerField()
    countdeo = models.IntegerField()
    countfdo = models.IntegerField()
    countp = models.IntegerField()
    counta = models.IntegerField()
    countr = models.IntegerField()
    countpr = models.IntegerField()
    countt = models.IntegerField(db_column='countT')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'count'


class Dba(models.Model):
    id = models.IntegerField(primary_key=True)
    password = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'dba'


class Deo(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    pasw = models.CharField(max_length=100)
    mail = models.CharField(max_length=254)

    class Meta:
        managed = False
        db_table = 'deo'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Fdo(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    password = models.CharField(max_length=100)
    mail = models.CharField(max_length=254)

    class Meta:
        managed = False
        db_table = 'fdo'


class Patient(models.Model):
    ssn = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    gender = models.CharField(max_length=100)
    age = models.DecimalField(max_digits=4, decimal_places=0)
    pcp = models.ForeignKey('Physician', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'patient'


class Patients(models.Model):
    ssn = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    gender = models.CharField(max_length=100)
    age = models.DecimalField(max_digits=4, decimal_places=0)
    pcp = models.ForeignKey('Physician', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'patients'


class Physician(models.Model):
    employeeid = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    password = models.CharField(max_length=100)
    department = models.CharField(max_length=100)
    mail = models.CharField(max_length=254)

    class Meta:
        managed = False
        db_table = 'physician'


class Prescribes(models.Model):
    id = models.IntegerField(primary_key=True)
    dose = models.TextField()
    patientid = models.ForeignKey(Patient, models.DO_NOTHING)
    physicianid = models.ForeignKey(Physician, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'prescribes'


class Procedure(models.Model):
    code = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    cost = models.DecimalField(max_digits=10, decimal_places=2)

    class Meta:
        managed = False
        db_table = 'procedure'


class Room(models.Model):
    no = models.IntegerField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'room'


class Stay(models.Model):
    stayid = models.IntegerField(primary_key=True)
    patientid = models.ForeignKey(Patient, models.DO_NOTHING)
    roomno = models.ForeignKey(Room, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'stay'


class TestedPatient(models.Model):
    ssn = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'tested_patient'
